#!/usr/bin/env bash

##############################
# archibold.io (C) 2016-2020 #
##############################
#
# arch-chroot env
#
# LABEL
# LANGUAGE
# LTS
# DISK
# BOOT
# SWAP
# ROOT
# UEFI
# USER
# PASSWORD
# EDD
# QUIET
# ENCRYPTION
# GNOME
#

source <(curl -s https://archibold.io/utils/partid)

install_pkg() {
  while ! pacman -S --needed --noconfirm "$@"
  do
    :
  done
}

cleanEfibootmgr() {
  local which="$1"
  local prev=
  for entry in $(efibootmgr); do
    if [ "$entry" = "$which" ]; then
      efibootmgr -b "${prev:4:-1}" -B
    fi
    prev="$entry"
  done
}

echo -e "
  generating $(tput bold)locale$(tput sgr0)
"

if [ "$LANGUAGE" != "en" ]; then
  sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
fi
sed -i -r "s/^#(${LANGUAGE}_.*? UTF-8)/\1/" /etc/locale.gen
locale-gen
locale > /etc/locale.conf

if [ "$LTS" = "yes" ]; then
echo -e "
  initializing $(tput bold)linux-lts$(tput sgr0)
"
else
echo -e "
  initializing $(tput bold)linux$(tput sgr0)
"
fi
pacman-key --init
pacman-key --populate archlinux

echo -e "
  updating $(tput bold)mirrorlist$(tput sgr0)
"
install_pkg reflector
reflector --verbose --latest 5 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

echo -e "
  installing $(tput bold)linux$(tput sgr0)
"

if [ "$LTS" = "yes" ]; then
  install_pkg linux-lts linux-lts-headers linux-firmware
else
  install_pkg linux linux-headers linux-firmware
fi
install_pkg pacman-mirrorlist mkinitcpio vi
sync

if [ "$ENCRYPTION" = "yes" ]; then
  echo -e "
  preparing  $(tput bold)encryption$(tput sgr0)
"

  echo "build() {
  add_binary blkid
  add_binary cryptsetup
  add_binary echo
  add_binary mkdir
  add_binary printf
  add_runscript
}

help() {
cat<<HELPEOF
  Asks for the encryption password once and then opens root and swap
HELPEOF
}" > /etc/initcpio/install/archibold

  UUID="$(partid $ROOT)"
  curl -LO https://archibold.io/utils/ask-password
  mv ask-password /etc/initcpio/hooks/archibold
  echo "
run_hook() {
  local password=
  local i=0
  mkdir -p /run/cryptsetup
  echo -e \"Please enter your \033[1mencryption\033[0m password\"
  while [ \$i -lt 3 ]; do
    i=\$((i+1))
    password=\$(askPassword)
    echo 'verifying password'
    echo \"\$password\" | sh -c 'cryptsetup open \$(blkid --uuid \"$UUID\") root'
    if [[ \$? -eq 0 ]]; then
      i=3
      echo -e \"password \033[1mOK\033[0m, please wait ...\"" >> /etc/initcpio/hooks/archibold
  if [ "$SWAP" != "0" ]; then
    UUID="$(partid $SWAP)"
    echo "      echo \"\$password\" | sh -c 'cryptsetup open \$(blkid --uuid \"$UUID\") swap'" >> /etc/initcpio/hooks/archibold
  fi
  echo "    else
      if [ \$i -eq 3 ]; then
        echo -e \"\033[1mtoo many wrong passwords\033[0m\"
      else
        echo -e \"\033[1mwrong\033[0m password, please try again:\"
      fi
    fi
  done
}
" >> /etc/initcpio/hooks/archibold
  # apparently consolefont was useless
  if [ "$SWAP" != "0" ]; then
    sed -i -r 's/^(HOOKS=.*)/#\1\nHOOKS=(base udev autodetect keyboard keymap modconf block archibold encrypt resume filesystems fsck)/' /etc/mkinitcpio.conf
  else
    sed -i -r 's/^(HOOKS=.*)/#\1\nHOOKS=(base udev autodetect keyboard keymap modconf block archibold encrypt filesystems fsck)/' /etc/mkinitcpio.conf
  fi
  if [ "$LTS" = "yes" ]; then
    mkinitcpio -p linux-lts
  else
    mkinitcpio -p linux
  fi
else
  if [ "$SWAP" != "0" ]; then
    sed -i -r 's/^(HOOKS=.*)/#\1\nHOOKS=(base udev autodetect modconf block resume filesystems keyboard fsck)/' /etc/mkinitcpio.conf
    if [ "$LTS" = "yes" ]; then
      mkinitcpio -p linux-lts
    else
      mkinitcpio -p linux
    fi
  fi
fi

echo -e "
  installing $(tput bold)wifi/net tools$(tput sgr0)
"

# TODO: I am not sure wireless-regdb is useful at all ...
install_pkg dialog wpa_supplicant iw grep sed netctl dhcpcd wireless-regdb

UCODE=''
UCODE_STRING=''
if [ "$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]; then
  UCODE='intel-ucode'
elif [ "$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]; then
  UCODE='amd-ucode'
fi
if [ "$UCODE" != "" ]; then
  UCODE_STRING="initrd  /${UCODE}.img
"
  echo -e "
  installing $(tput bold)${UCODE}$(tput sgr0)
"
  install_pkg $UCODE
fi

if [ "$UEFI" = "efi32" ] || [ "$UEFI" = "efi64" ]; then
  echo -e "
  installing $(tput bold)UEFI$(tput sgr0) tools
"
  install_pkg efibootmgr efitools
fi

if [ "$SWAP" != "0" ]; then
  echo -e "
  creating  $(tput bold)swap$(tput sgr0)
"
  if [ "$ENCRYPTION" = "yes" ]; then
    swapon /dev/mapper/swap
  else
    swapon $SWAP
  fi
fi

echo -e "
  generating $(tput bold)fstab$(tput sgr0)
"

genfstab -U -p / > /etc/fstab

sync
sed -i -r 's/^(# )?(\/etc|efivarfs).*//' /etc/fstab

if [ "$ENCRYPTION" = "yes" ]; then
  APPEND="options root=/dev/mapper/root rw"
  if [ "$SWAP" != "0" ]; then
    APPEND="$APPEND resume=/dev/mapper/swap rw"
  fi
  if [ "$BOOT_LOUDLY" = "" ]; then
    APPEND="$APPEND quiet loglevel=0"
  fi
else
  UUID="$(partid $ROOT)"
  APPEND="options root=UUID=${UUID} rw"
  if [ "$SWAP" != "0" ]; then
    UUID="$(partid $SWAP)"
    APPEND="$APPEND resume=UUID=${UUID} rw"
  fi
  if [ "$BOOT_LOUDLY" = "" ]; then
    APPEND="$APPEND quiet splash loglevel=0"
  fi
fi

if [ "$EDD" != "" ]; then
  APPEND="$APPEND edd=$EDD"
fi

if [ "$UEFI" = "efi32" ] || [ "$UEFI" = "efi64" ]; then
  echo -e "
  cleaning $(tput bold)efi$(tput sgr0) variables, if any
"
  cleanEfibootmgr "$LABEL"
fi

echo -e "
  preparing $(tput bold)bootctl$(tput sgr0)
"

bootctl --path=/boot install

if [ "$UEFI" = "efi32" ] || [ "$UEFI" = "efi64" ]; then
  install_pkg sbsigntools findutils grep
  mkdir -p /etc/pacman.d/hooks
  cd /etc/pacman.d/hooks/
  # curl -LO https://archibold.io/setup-utils/99-secureboot.hook
  curl -LO https://archibold.io/setup-utils/100-systemd-boot.hook
  cd -
fi

if [ "$LTS" = "yes" ]; then
  echo "title   ${LABEL}
linux   /vmlinuz-linux-lts
${UCODE_STRING}initrd  /initramfs-linux-lts.img
${APPEND}" > /boot/loader/entries/arch.conf
else
  echo "title   ${LABEL}
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux.img
${APPEND}" > /boot/loader/entries/arch.conf
fi

echo -e "
  assigning $(tput bold)root$(tput sgr0) passwords
"

yes "$PASSWORD" | passwd

echo -e "
  creating user $(tput bold)$USER$(tput sgr0)
"

useradd -m -g users -G audio,games,input,lp,optical,power,scanner,storage,video,wheel -s /bin/bash $USER

echo -e "
  assigning $(tput bold)$USER$(tput sgr0) passwords
"

yes "$PASSWORD" | passwd $USER

echo -e "
  installing $(tput bold)so$(tput sgr0) helper
"

curl -LOs https://archibold.io/utils/so
chmod a+x so
mv so /usr/bin

echo -e "
  installing $(tput bold)aur$(tput sgr0) helper
"

curl -LOs https://archibold.io/utils/aur
chmod a+x aur
mv aur /usr/bin

echo -e "
  installing $(tput bold)gdm-login-bg$(tput sgr0) helper
"

curl -LOs https://archibold.io/utils/gdm-login-bg
chmod a+x gdm-login-bg
mv gdm-login-bg /usr/bin

echo -e "
  installing $(tput bold)mirrorlist$(tput sgr0) helper
"

curl -LOs https://archibold.io/utils/mirrorlist
chmod a+x mirrorlist
mv mirrorlist /usr/bin

if [ "$(which hwclock 2> /dev/null)" != "" ]; then
  echo -e "
  updating $(tput bold)time$(tput sgr0)
"
  hwclock --systohc --utc
fi

echo -e "
  executing $(tput bold)sync$(tput sgr0)
"

sync

runuser -l $USER -c "echo '
# for a better bash experience
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # many commands in ongoing session memory
export HISTFILESIZE=100000               # many lines in .bash_history
shopt -s histappend                      # append to historyinstead of overwriting it
alias open=xdg-open                      # macOS open like function
. /etc/profile.d/vte.sh                  # new terminal tabs in the same folder
' >> /home/$USER/.bashrc"

if [ "$GNOME" = "yes" ]; then
  echo -e "
  installing $(tput bold)GNOME$(tput sgr0)
"
  runuser -l $USER -c "
export SUDO_PASSWORD='$PASSWORD'
bash <(curl -s https://archibold.io/install/gnome)
"

  install_pkg neofetch

  # TODO: I'd love to get rid of the root user password but it cannot be done
  #       at this point, otherwise GNOME cannot be installed on boot.
  # passwd -d root

fi

echo -e "
  dropping $(tput bold)swap$(tput sgr0)
"

if [ "$ENCRYPTION" = "yes" ]; then
  swapoff /dev/mapper/swap
else
  swapoff $SWAP
fi

if [ -f /etc/pacman.d/hooks/99-secureboot.hook ]; then
  pacman -S --noconfirm systemd
fi

# This is likely not useful at all
# WIFI="$(ip addr | grep ': wl*' | sed 's/.*: \(wl.*\):.*/\1/')"
# if [ "$WIFI" != "" ]; then
#   echo "ACTION==\"add\", SUBSYSTEM==\"net\", KERNEL==\"wl*\", RUN+=\"/usr/bin/iw dev $WIFI set power_save off"\" > /etc/udev/rules.d/81-wifi-powersave.rules
# fi

exit
