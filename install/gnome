#!/usr/bin/env bash

##############################
# archibold.io (C) 2016-2020 #
##############################

if [ "$USER" = "" ]; then
  USER="$(whoami)"
fi

if [ "$USER" = "root" ]; then
  echo "$(tput bold)Warning$(tput sgr0): you must login as regular user"
  exit 1
fi

if [ "$(curl -s https://archibold.io/ 2> /dev/null)" = "" ]; then
  echo "$(tput bold)Warning$(tput sgr0): you need an internet connection"
  echo '  * if you are wired, try typing: dhcpcd'
  echo '  * if you have WiFi, try typing: wifi-menu'
  exit 1
fi

write() {
  echo ''
  echo "$(tput smso)$1$(tput sgr0)"
  echo ''
}

findGPU() {
  local GPU_DRIVERS=
  if [ "$GPU_DRIVERS" = "" ] && [ "$(lspci -k | grep -A 2 -E "(VGA|3D)" | grep NVIDIA)" != "" ]; then
    GPU_DRIVERS="nvidia nvidia-utils"
  fi
  if [ "$GPU_DRIVERS" = "" ] && [ "$(lspci -k | grep -A 2 -E "(VGA|3D)" | grep AMD)" != "" ]; then
    GPU_DRIVERS="xf86-video-amdgpu vulkan-radeon"
  fi
  if [ "$GPU_DRIVERS" = "" ] && [ "$(lspci -k | grep -A 2 -E "(VGA|3D)" | grep Intel)" != "" ]; then
    GPU_DRIVERS="xf86-video-intel vulkan-intel"
  fi
  if [ "$GPU_DRIVERS" = "" ]; then
    GPU_DRIVERS="xf86-video-fbdev xf86-video-vesa"
  fi
  echo "$GPU_DRIVERS"
}

installGNOME() {
  local GPU_DRIVERS="$1"
  local PASSWORD="$2"
  local BASHRC=~/.bashrc
  local SHELL_AVAILABLE="$(which gnome-shell 2> /dev/null)"
  local FROM_ARCHIBOLD=nope
  local pkg=

  if [ ! -f "$BASHRC" ]; then
    echo "$(tput bold)Warning$(tput sgr0): something very wrong with this environment"
    exit 1
  fi

  if [ "$PASSWORD" = "" ]; then
    write "Please enter the root password"
    PASSWORD="$(systemd-ask-password)"
  else
    FROM_ARCHIBOLD=yep
  fi

  if [ "$(echo "$PASSWORD" | su -c "ls $BASHRC" 2> /dev/null)" != "$BASHRC" ]; then
    echo "$(tput bold)Warning$(tput sgr0): invalid root password"
    exit 1
  fi

  if [ "$(cat $BASHRC | grep '[archibold.io]')" = "" ]; then
    write "Improving Bash"
    echo '
# [archibold.io] bash extras
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # many commands in ongoing session memory
export HISTFILESIZE=100000               # many lines in .bash_history
shopt -s histappend                      # append to historyinstead of overwriting it
alias open=xdg-open                      # macOS open like function
. /etc/profile.d/vte.sh                  # new terminal tabs in the same folder
' >> $BASHRC
  fi

  if [ "$(which sudo 2> /dev/null)" = "" ]; then
    write "Updating pacman and installing sudo"
    echo "$PASSWORD" | su -c "pacman -Sy --needed --noconfirm sudo"

    if [ "$(groups | grep wheel)" = "" ]; then
      echo "$PASSWORD" | su -c "gpasswd -a $USER wheel"
    fi

    echo "$PASSWORD" | su -c '
if [[ "$(cat /etc/sudoers | grep -s "^%wheel ALL=(ALL) ALL")" = "" ]]; then
  echo "
## [archibold.io] enabled wheel group
%wheel ALL=(ALL) ALL
" >> /etc/sudoers
fi

if [[ "$(cat /etc/sudoers | grep -s "^Defaults env_reset")" = "" ]]; then
  echo "
## [archibold.io] never expiring sudo password
Defaults env_reset, timestamp_timeout=-1
" >> /etc/sudoers
fi'
  else
    write "Updating pacman"
    echo "$PASSWORD" | su -c "pacman -Sy --needed --noconfirm"
  fi

  write "Verifying sudo"
  pkg=""
  while [ "$pkg" != "$BASHRC" ]; do
    pkg="$(echo "$PASSWORD" | sudo -S ls $BASHRC 2> /dev/null)"
    if [ "$pkg" != "$BASHRC" ]; then
      write "Please enter the user $USER password"
      PASSWORD="$(systemd-ask-password)"
    fi
  done

  if [ "$pkg" != "$BASHRC" ]; then
    echo "$(tput bold)Warning$(tput sgr0): invalid sudo password for user $USER"
    exit 1
  fi

  if [ "$SHELL_AVAILABLE" = "" ]; then
    write "Installing GNOME with $GPU_DRIVERS"
    if [ "$GPU_DRIVERS" = "" ]; then
      GPU_DRIVERS="$(findGPU)"
    fi

    local IGNORE=("gnome" "gnome-books" "gnome-boxes" "gnome-contacts" "gnome-music" "gnome-remote-desktop" "gnome-software" "gnome-user-docs")
    local GNOME=""
    local add=""
    for pkg in $(pacman -Sqg gnome); do
      add="yes"
      for nope in ${IGNORE[@]}; do
        if [ "${pkg}" = "${nope}" ]; then
          add="no"
          break
        fi
      done
      if [ "${add}" = "yes" ]; then
        GNOME="${GNOME} ${pkg}"
      fi
    done

    echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm $GNOME $GPU_DRIVERS networkmanager hunspell-en_us vlc transmission-gtk xdg-utils libva-mesa-driver libva-vdpau-driver mesa-vdpau exfat-utils fuse-exfat ntfs-3g dosfstools ttf-dejavu ttf-liberation ttf-opensans ttf-joypixels noto-fonts noto-fonts-emoji noto-fonts-extra flatpak xf86-input-libinput xsel cups system-config-printer simple-scan bluez bluez-utils gnome-themes-extra gnome-tweaks imagemagick

    echo "$PASSWORD" | sudo -S systemctl enable NetworkManager
    echo "$PASSWORD" | sudo -S systemctl enable gdm
    echo "$PASSWORD" | sudo -S systemctl enable bluetooth
  fi

  if [ "$(which timedatectl 2> /dev/null)" != "" ]; then
    echo "$PASSWORD" | sudo -S timedatectl set-ntp 1
    echo "$PASSWORD" | sudo -S timedatectl set-ntp 1
  fi

  if [ "$(which lsusb 2> /dev/null)" != "" ] && [ "$(lsusb | grep -i fingerprint)" != "" ]; then
    echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm fprintd
  fi

  if [ "$FROM_ARCHIBOLD" = "nope" ]; then

    write "Configuring GNOME"
    bash <(curl -s https://archibold.io/install/gnome-settings)

    # write "Configuring Firefox"
    echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm firefox
    xdg-settings set default-web-browser firefox.desktop
    gsettings set org.gnome.shell favorite-apps "$(gsettings get org.gnome.shell favorite-apps | sed s/org.gnome.Epiphany.desktop/firefox.desktop/)"

    if [ "$(which pamac 2> /dev/null)" = "" ]; then
      write "Installing base-devel and git"
      echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm base-devel git
      if [ -f ~/.gitconfig ] && [ "$(cat ~/.gitconfig | grep alias)" = "" ]; then
        write "Adding common git aliases"
        curl -s https://archibold.io/install/git-alias >> ~/.gitconfig
      fi

      if [ "$(which aur 2> /dev/null)" = "" ]; then
        write "Installing AUR helper"
        bash <(curl -s https://archibold.io/install/aur)
      fi

      write "Installing pamac-aur"

      # TODO: this should *not* be needed
      echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm asciidoc archlinux-appstream-data

      aur libpamac-aur
      aur pamac-aur
      aur chrome-gnome-shell
    fi
  else
    write "Installing base-devel and git"
    echo "$PASSWORD" | sudo -S pacman -S --needed --noconfirm base-devel git

    write "Finalizing pamac install on terminal"
    echo '
# [archibold.io] GNOME installer, remaining parts
if [ "$(which pamac 2> /dev/null)" = "" ]; then
  bash <(curl -s https://archibold.io/install/gnome)
fi
' >> $BASHRC
  fi

  write "GNOME has been successfully installed"
}

clear
installGNOME "$GPU_DRIVERS" "$SUDO_PASSWORD"
