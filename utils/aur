#!/usr/bin/env sh

#########################
# (c) archibold.io 2019 #
#########################

aur() {
  local build=""
  local pkg=""
  local preserve=""
  local skippgp=""
  local HAS_SUDO=0
  if [ "$(which sudo 2> /dev/null)" != "" ]; then
    HAS_SUDO=1
  fi
  if [ "${3}" = "--no-pgp" ] || [ "${2}" = "--no-pgp" ] || [ "${1}" = "--no-pgp" ]; then
    skippgp="--skippgpcheck"
  fi
  if [ "${3}" = "--preserve" ] || [ "${2}" = "--preserve" ] || [ "${1}" = "--preserve" ]; then
    preserve="--preserve"
  fi
  pkg="${1}"
  if [ "${pkg}" = "--no-pgp" ] || [ "${pkg}" = "--preserve" ]; then
    pkg="${2}"
    if [ "${pkg}" = "--no-pgp" ] || [ "${pkg}" = "--preserve" ]; then
      pkg="${3}"
    fi
  fi
  if [ "${pkg}" = "" ] || [ "${pkg}" = "--help" ]; then
    echo ""
    echo "The $(tput bold)aur$(tput sgr0) utility, from https://archibold.io"
    echo "$(tput dim)A minimalistic AUR installer alternative.$(tput sgr0)"
    echo ""
    echo "  aur pamac-aur"
    echo "  aur --preserve wpewebkit"
    echo "  aur --no-pgp expressvpn"
    echo "  $(tput dim)aur --help this message$(tput sgr0)"
    echo ""
    echo "  yes \$ROOT_PASSWORD | aur any-package # when no sudo is present"
    echo ""
    echo "$(tput dim)Use $(tput sgr0)--preserve$(tput dim) to avoid removing the folder once built,"
    echo "which is specially useful when things don't go as expected.$(tput sgr0)"
    echo ""
    echo "$(tput dim)Use $(tput sgr0)--no-pgp$(tput dim) to ignore PGP keys $(tput sgr0)at your own risk"
    echo ""
    echo "$(tput dim)Use $(tput sgr0)AUR_NO_SUDO=1$(tput dim) to force-use su instead$(tput sgr0)"
    echo ""
  elif [ "$USER" = "root" ]; then
    echo ""
    echo "You $(tput bold)cannot be root$(tput sgr0) to run $(tput bold)aur$(tput sgr0)"
    echo ""
  else
    if [ "${AUR_NO_SUDO}${HAS_SUDO}" = "1" ]; then
      echo "Checking $(tput bold)sudo$(tput sgr0) privileges"
      sudo ls > /dev/null
    fi
    if [ ! -f ~/.archibold-aur ]; then
      date > ~/.archibold-aur
      echo "Installing $(tput bold)base-devel$(tput sgr0) and $(tput bold)git$(tput sgr0)"
      if [ "$AUR_NO_SUDO" != "" ] || [ "$HAS_SUDO" = "0" ]; then
        su -c 'pacman -S --needed --noconfirm base-devel git'
        if [ "$HAS_SUDO" = "0" ]; then
          su -c 'pacman -R --noconfirm sudo'
        fi
      else
        sudo pacman -S --needed --noconfirm base-devel git
      fi
    fi
    rm -rf ~/tmp-${pkg}
    echo "Creating ~/tmp-${pkg}"
    mkdir -p ~/tmp-${pkg}
    cd ~/tmp-${pkg}
    git clone https://aur.archlinux.org/${pkg}.git
    cd ${pkg}
    echo "Making $(tput bold)${pkg}$(tput sgr0) package"
    makepkg -Asfc --needed --noconfirm ${skippgp}
    echo ""
    if [ "$?" = "0" ]; then
      build="$(ls ${pkg}*.pkg.tar.{xz,zst} 2> /dev/null)"
      if [ "$build" != "" ]; then
        echo "$(tput bold)Created$(tput sgr0): ~/tmp-${pkg}/${pkg}/${build}"
        sync
        if [ "$AUR_NO_SUDO" != "" ] || [ "$HAS_SUDO" = "0" ]; then
          su -c "yes y | pacman -U ${build}"
        else
          sudo sh -c "yes y | pacman -U ${build}"
        fi
      fi
    else
      echo "$(tput bold)Error$(tput sgr0) $?: ${pkg}*.tar.{xz,zst} not found"
    fi
    if [ "${preserve}" != "--preserve" ]; then
      echo "cleaning up"
      rm -rf ~/tmp-${pkg}
    fi
    echo ""
  fi
}

aur "${1}" "${2}" "${3}"
