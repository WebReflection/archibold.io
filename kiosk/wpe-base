#!/usr/bin/env bash

if [ "$(which sudo 2> /dev/null)" = "" ]; then
  bash <(curl -s https://archibold.io/utils/sudo)
else
  # sudo installs already the 
  sudo pacman-key --init
  sudo pacman-key --populate archlinuxarm
fi

sudo pacman -Sy --noconfirm

if [ "$(uname -m)" = "aarch64" ] && [ "$(pacman -Qs linux-raspberrypi4)" = "" ]; then
  clear
  echo ""
  echo "Would you like to use linux-raspberrypi4 kernel? [y/N]"
  echo "Use this option if you had GPU issues before"
  echo ""
  read -n1 -s RPi4
  if [ "$RPi4" = "y" ] || [ "$RPi4" = "Y" ]; then
    bash <(curl -s https://archibold.io/install/linux-raspberrypi)
  fi
fi

clear
echo ""
echo "Would you like to install NodeJS too? [y/N]"
echo "The jellyfish demo will start from a local instance"
echo ""
read -n1 -s RPi4
if [ "$RPi4" = "y" ] || [ "$RPi4" = "Y" ]; then
  yes y | sudo pacman -S --needed --noconfirm unzip npm
fi

sudo pacman -Syu --noconfirm

bash <(curl -s https://archibold.io/install/login)
bash <(curl -s https://archibold.io/install/weston)
bash <(curl -s https://archibold.io/install/wpe)

# install jellyfish demo
if [ "$(which unzip 2> /dev/null)" != "" ] && [ ! -d ~/www ]; then
  mkdir -p ~/www
  cd ~/www
  curl -LO https://archibold.io/demo/jellyfish.zip
  unzip jellyfish
  rm jellyfish.zip
fi

if [ "$(which npm 2> /dev/null)" != "" ]; then
  if [ "$(cat ~/.bashrc | grep -F '[archibold.io] npm')" = "" ]; then
    echo '
# [archibold.io] npm
export PATH="${PATH}:${HOME}/.npm-packages/bin"
export NODE_PATH="${NODE_PATH}:${HOME}/.npm-packages/lib/node_modules"
' >> ~/.bashrc
    export PATH="${PATH}:${HOME}/.npm-packages/bin"
    export NODE_PATH="${NODE_PATH}:${HOME}/.npm-packages/lib/node_modules"
    mkdir -p ~/.npm-packages/bin
    npm config set prefix '~/.npm-packages'
  fi

  if [ ! -d ~/www/node_modules ]; then
    mkdir -p ~/www/node_modules
    cd ~/www
    echo '#!/usr/bin/env node

const {exec} = require("child_process");
const {join} = require("path");

const compression = require("compression");
const express = require("express");
const server = express();
server
  .use(compression())
  .use(express.static(join(__dirname, "jellyfish")))
  .get("/quit", () => process.exit(0))
  .get("/ips", (_, res) => {
    const ips = new Set;
    for (const [_, nets] of Object.entries(require("os").networkInterfaces())) {
      for (const net of nets) {
        if (net.family === "IPv4" && !net.internal)
          ips.add(net.address);
      }
    }
    res.writeHead(200, {
      "content-type": "application/json"
    });
    res.end(JSON.stringify([...ips]));
  })
  .listen(8080, () => {
    let command = "COG_PLATFORM_FDO_VIEW_FULLSCREEN=1 cog -P fdo ";
    exec(command + "http://127.0.0.1:8080/index.html");
  });
'>index.js
    chmod a+x index.js
    echo '{"private": true}'>package.json
    npm i express compression
    cd -
  fi

  sed -i 's/\/wpe/\/www\/index.js/g' ~/.config/weston.ini
fi

bash <(curl -s https://archibold.io/install/weston-launch)
