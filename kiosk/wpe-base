#!/usr/bin/env bash

if [ "$(which sudo 2> /dev/null)" = "" ]; then
  bash <(curl -s https://archibold.io/utils/sudo)
else
  # sudo installs already the 
  sudo pacman-key --init
  sudo pacman-key --populate archlinuxarm
fi

clear
echo ""
echo "Would you like to use linux-raspberrypi4 kernel? [y/N]"
echo "Use this option if you had GPU issues before"
echo ""
read -n1 -s RPi4
if [ "$RPi4" = "y" ] || [ "$RPi4" = "Y" ]; then
  yes y | sudo pacman -S linux-raspberrypi4
  sudo sh -c "sed -i 's/mmcblk1/mmcblk0/g' /etc/fstab"
fi

sudo pacman -Syu --noconfirm

sudo groupadd weston-launch
sudo usermod -a -G wheel,games,power,optical,storage,scanner,lp,audio,video,render,weston-launch ${USER}

sudo mkdir -p /etc/systemd/system/getty@tty1.service.d
sudo sh -c "echo '[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty -nia ${USER} %I
'>/etc/systemd/system/getty@tty1.service.d/override.conf"

if [ "$(which timedatectl 2> /dev/null)" != "" ]; then
  sudo timedatectl set-timezone "$(curl --fail https://ipapi.co/timezone)"
else
  clear
  echo 'WARNING: unable to set /etc/localtime'
  echo '         performance will probably degrade'
  sleep 10
fi

source <(curl -s https://archibold.io/utils/aur)

# this is apparently not needed anymore (not in the Pi 4)
# if [ "$(pacman -Qmq cairo-glesv2-bin 2> /dev/null)" = "" ]; then
#   aur --no-pgp cairo-glesv2-bin
# fi

if [ "$(pacman -Qmq wpewebkit-bin 2> /dev/null)" = "" ]; then
  aur --no-pgp wpewebkit-bin
fi

sudo pacman -S --needed --noconfirm \
  jack libbluray \
  gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugins-bad \
  gstreamer-vaapi gst-libav \
  geoip geoclue \
  weston mesa vulkan-mesa-layers ttf-dejavu \
  wpebackend-fdo wayland-protocols \
  nodejs npm \
  unzip

if [ "$(pacman -Qmq cog-wpe-bin 2> /dev/null)" = "" ]; then
  aur --no-pgp cog-wpe-bin
fi

mkdir -p ~/.config
if [ ! -f ~/.config/weston.ini ]; then
  echo "[core]
idle-time=0
repaint-window=15
require-input=false

[shell]
client=${HOME}/www/index.js
animation=none
close-animation=none
startup-animation=none
locking=false

[output]
name=
mode=
">~/.config/weston.ini
fi

# install jellyfish demo
if [ "$(which unzip 2> /dev/null)" != "" ] && [ ! -d ~/www ]; then
  mkdir -p ~/www
  cd ~/www
  curl -LO https://archibold.io/demo/jellyfish.zip
  unzip jellyfish
  rm jellyfish.zip
fi

if [ "$(which npm 2> /dev/null)" != "" ]; then
  if [ "$(cat ~/.bashrc | grep -F '[archibold.io] npm')" = "" ]; then
    echo '
# [archibold.io] npm
export PATH="${PATH}:${HOME}/.npm-packages/bin"
export NODE_PATH="${NODE_PATH}:${HOME}/.npm-packages/lib/node_modules"
' >> ~/.bashrc
    export PATH="${PATH}:${HOME}/.npm-packages/bin"
    export NODE_PATH="${NODE_PATH}:${HOME}/.npm-packages/lib/node_modules"
    mkdir -p ~/.npm-packages/bin
    npm config set prefix '~/.npm-packages'
  fi

  if [ ! -d ~/www/node_modules ]; then
    mkdir -p ~/www/node_modules
    cd ~/www
    echo '#!/usr/bin/env node

const {exec} = require("child_process");
const {join} = require("path");

const compression = require("compression");
const express = require("express");
const server = express();
server
  .use(compression())
  .use(express.static(join(__dirname, "jellyfish")))
  .get("/quit", () => process.exit(0))
  .get("/ips", (_, res) => {
    const ips = new Set;
    for (const [_, nets] of Object.entries(require("os").networkInterfaces())) {
      for (const net of nets) {
        if (net.family === "IPv4" && !net.internal)
          ips.add(net.address);
      }
    }
    res.writeHead(200, {
      "content-type": "application/json"
    });
    res.end(JSON.stringify([...ips]));
  })
  .listen(8080, () => {
    let command = "COG_PLATFORM_FDO_VIEW_FULLSCREEN=1 cog -P fdo ";
    exec(command + "http://127.0.0.1:8080/index.html");
  });
'>index.js
    chmod a+x index.js
    echo '{"private": true}'>package.json
    npm i express compression
    cd -
  fi
fi

if [ "$(cat ~/.bashrc | grep -F '[archibold.io] weston')" = "" ]; then
    echo '
# [archibold.io] weston
export KIOSK_WIDTH=1280
export KIOSK_HEIGHT=720
export GTK_THEME="Adwaita:dark"

setWestonMode() {
  local MODE="$1"
  local NAME=""
  sed -i "s/name=.*//;s/mode=.*//;/^$/d;s/\[/\n\[/" ~/.config/weston.ini
  for NAME in $(ls /sys/class/drm | grep HDMI); do
    if [ "$NAME" != "" ]; then
      echo "name=${NAME:6}">>~/.config/weston.ini
      echo "mode=${MODE}">>~/.config/weston.ini
      # prefer one output only
      return
    fi
  done
}

if [[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && [ "$(pgrep --list-name weston)" = "" ]; then
  setWestonMode "${KIOSK_WIDTH}x${KIOSK_HEIGHT}"
  weston-launch
fi
'>>~/.bashrc
fi
